{"version":3,"sources":["components/header/header.js","components/form/form.js","components/footer/footer.js","components/results/results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Form","props","handelUrl","e","setState","url","target","value","click","updataState","state","handelMethod","method","name","post","get","put","delete","requstes","this","onChange","id","onClick","style","background","Footer","Results","count","JSON","stringify","headers","results","App","a","fetch","data","json","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UAgBeA,G,mLAXb,OACE,yBAAKC,UAAU,UACX,0C,GAJaC,IAAMC,Y,OC2FZC,G,wDA1Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,UAAY,SAACC,GACX,EAAKC,SAAS,CAAEC,IAAKF,EAAEG,OAAOC,SAbb,EAenBC,MAAQ,SAACL,GACP,EAAKF,MAAMQ,YAAY,EAAKC,MAAML,KAClC,EAAKD,SAAS,CAAEC,IAAK,MAjBJ,EA6BnBM,aAAe,SAACR,GACd,IAAIS,EAAST,EAAEG,OAAOO,KACtB,EAAKT,SAAS,CACZU,KAAM,UACNC,IAAK,UACLC,IAAK,UACLC,OAAQ,YAGV,EAAKb,SAAL,aAAgBQ,UAASA,EAAS,WApClC,EAAKF,MAAQ,CACXL,IAAK,GACLO,OAAQ,GACRM,SAAU,GACVJ,KAAM,UACNC,IAAK,UACLC,IAAK,UACLC,OAAQ,WATO,E,qDA0CjB,OACE,yBAAKpB,UAAU,QACb,uBAAGA,UAAU,QACX,0BAAMA,UAAU,QAAhB,QACA,2BAAOgB,KAAK,QAAQN,MAAOY,KAAKT,MAAML,IAAKe,SAAUD,KAAKjB,YAC1D,4BAAQmB,GAAG,SAASC,QAASH,KAAKX,OAAlC,QAUF,4BACEe,MAAO,CAAEC,WAAYL,KAAKT,MAAMK,KAChCF,KAAK,MACLS,QAASH,KAAKR,cAHhB,OAOA,4BACEY,MAAO,CAAEC,WAAYL,KAAKT,MAAMI,MAChCD,KAAK,OACLS,QAASH,KAAKR,cAHhB,QAOA,4BACEY,MAAO,CAAEC,WAAYL,KAAKT,MAAMM,KAChCH,KAAK,MACLS,QAASH,KAAKR,cAHhB,OAOA,4BACEY,MAAO,CAAEC,WAAYL,KAAKT,MAAMO,QAChCJ,KAAK,SACLS,QAASH,KAAKR,cAHhB,e,GA/EWb,IAAMC,YCgBV0B,G,6KAdb,OACE,yBAAK5B,UAAU,UACX,wD,GAJaC,IAAMC,YCkBZ2B,MAnBf,SAAiBzB,GACf,OACE,yBAAKJ,UAAU,YACZI,EAAM0B,MAAQ,GACb,6BACGC,KAAKC,UACJ,CACEC,QAAS7B,EAAM6B,QACfH,MAAO1B,EAAM0B,MACbI,QAAS9B,EAAM8B,SAEjB,KACA,MCiCGC,E,kDApCb,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAURQ,YAXmB,uCAWL,WAAOJ,GAAP,eAAA4B,EAAA,sEACKC,MAAM7B,GADX,cACR8B,EADQ,OAEZ,EAAK/B,SAAS,CAAE0B,QAASK,EAAKL,UAFlB,SAGCK,EAAKC,OAHN,OAGZD,EAHY,OAIZ,EAAK/B,SAAS,CACZ2B,QAASI,EAAKJ,QACdJ,MAAOQ,EAAKR,QANF,2CAXK,sDAEjB,EAAKjB,MAAQ,CAEXiB,MAAO,EACPI,QAAS,GACTD,QAAS,IANM,E,qDAwBjB,OAEE,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM5B,YAAaU,KAAKV,cACxB,kBAAC,EAAD,CAASqB,QAASX,KAAKT,MAAMoB,QAASH,MAAOR,KAAKT,MAAMiB,MAAOI,QAASZ,KAAKT,MAAMqB,UACnF,kBAAC,EAAD,W,GA/BUjC,IAAMC,WCEJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f63ee8a6.chunk.js","sourcesContent":["import React from 'react';\nimport './header.scss';\n\nclass Header extends React.Component {\n  render() {\n  return ( \n    <div className=\"header\">\n        <h1>RESTy</h1>\n    </div>\n    )\n  }\n  \n}\n\n//better be a function since nothing is passed to it\n//const Header = () =><header><h1>RESTY</h1></header>;\nexport default Header;","import React from 'react';\nimport './form.scss';\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: '',\n      method: '',\n      requstes: [],\n      post: '#e2e2e2',\n      get: '#e2e2e2',\n      put: '#e2e2e2',\n      delete: '#e2e2e2',\n    };\n  }\n  handelUrl = (e) => {\n    this.setState({ url: e.target.value });\n  };\n  click = (e) => {\n    this.props.updataState(this.state.url);\n    this.setState({ url: '' });\n    // let requstes = this.state.requstes;\n    // let html = (\n    //   <p>\n    //     <span className=\"span\">{this.state.method}</span>\n    //     {this.state.url}\n    //   </p>\n    // );\n    // requstes.push(html);\n    // this.setState({ requstes });\n    // console.log('helllo', this.state);\n  };\n  handelMethod = (e) => {\n    let method = e.target.name;\n    this.setState({\n      post: '#e2e2e2',\n      get: '#e2e2e2',\n      put: '#e2e2e2',\n      delete: '#e2e2e2',\n    });\n\n    this.setState({ method, [method]: 'green' });\n  };\n//[method] is like ${method}\n  render() {\n    return (\n      <div className=\"form\">\n        <p className=\"purl\">\n          <span className=\"span\">URL:</span>\n          <input name=\"value\" value={this.state.url} onChange={this.handelUrl} />\n          <button id=\"button\" onClick={this.click}>\n            GO!\n          </button>\n        </p>\n\n        \n        \n        \n        \n        \n        <button\n          style={{ background: this.state.get }}\n          name=\"get\"\n          onClick={this.handelMethod}\n        >\n          GET\n        </button>\n        <button\n          style={{ background: this.state.post }}\n          name=\"post\"\n          onClick={this.handelMethod}\n        >\n          POST\n        </button>\n        <button\n          style={{ background: this.state.put }}\n          name=\"put\"\n          onClick={this.handelMethod}\n        >\n          PUT\n        </button>\n        <button\n          style={{ background: this.state.delete }}\n          name=\"delete\"\n          onClick={this.handelMethod}\n        >\n          DELETE\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component {\n  render() {\n  return ( \n    <div className=\"footer\">\n        <p>\n        &copy; 2020 CodeFollow\n        </p>\n    </div>\n    )\n  }\n  \n}\n//better be a function since nothing is passed to it\n//const Footer = () => <footer> <div className=\"footer\"> <p> &copy; 2020 </p> </div> </footer>;\n\n\nexport default Footer;","import React from 'react';\n// import './form.scss';\nfunction Results(props) {\n  return (\n    <div className=\"continar\">\n      {props.count > 0 && (\n        <pre>\n          {JSON.stringify(\n            {\n              headers: props.headers,\n              count: props.count,\n              results: props.results,\n            },\n            null,\n            3\n          )}\n        </pre>\n      )}\n    </div>\n  );\n}\nexport default Results;","import React from 'react';\nimport './App.scss';\n\nimport Header from './components/header/header.js';\nimport Form from './components/form/form.js';\nimport Footer from './components/footer/footer.js';\nimport Results from './components/results/results.js';\n\n\n//class App\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // key and value pairs\n      count: 0,\n      results: [],\n      headers: [],\n    };\n  }\n\n  // method to be passed to form\n  updataState = async (url) => {\n    let data = await fetch(url);\n    this.setState({ headers: data.headers });\n    data = await data.json();\n    this.setState({\n      results: data.results,\n      count: data.count,\n    });\n  };\n    // {count: count , results:results}\n  \n\n  render() {\n    return (\n      // I will add Header, Main, Footer\n      <React.Fragment>\n        <Header />\n        <Form updataState={this.updataState} />\n        <Results headers={this.state.headers} count={this.state.count} results={this.state.results} />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}